import { AvatarConfig } from './avatar-config';
import { Http } from "@angular/http";
import { Observable } from "rxjs/Observable";
import 'rxjs/add/operator/map';
/**
 * Provides utilities methods related to Avatar component
 */
export declare class AvatarService {
    private avatarConfig;
    private http;
    private _avatarColors;
    constructor(avatarConfig: AvatarConfig, http: Http);
    /**
    * Get a random color.
    * The color is based on the ascii code of the given value.
    * This will guarantee that avatars with the same value
    * will have the same background color
    *
    * @returns {string}
    */
    getRandomColor(value: string): string;
    /**
     * Returns the list of supported avatar sources.
     *
     * @returns {string[]}
     */
    getSources(): string[];
    /**
     * Returns the list of defaul colors.
     *
     * @returns {string[]}
     */
    getDefaultColors(): string[];
    /**
     * Returns a set of colors that will be used to fill the background color
     * of text avatars. If the user has provided a list of colors, Then this list
     * will be returned. Otherwise, the default colors will be used.
     *
     * @returns {string[]}
     */
    getAvatarColors(): string[];
    /**
    * Get source priority
    * Facebook has the highest priority, Value has the lowest
    * @param source
    * @param avatarSources
    */
    getSourcePriority(source: string, avatarSources?: string[]): number;
    /**
     * Check if the given source is a valid avatar source or not.
     *
     * @export
     * @param {string} source
     * @returns {boolean}
     */
    isSource(source: string): boolean;
    /**
     * return the sum of ascii code of the given string
     * @param value
     */
    _calculateAsciiCode(value: string): number;
    /**
     * Check wether the type of avatar is text or not.
     *
     * @export
     * @param {string} sourceType
     * @returns {boolean}
     */
    isTextAvatar(sourceType: string): boolean;
    /**
     * Retuns an Observable which is responisble of fetching async avatars
     * @param {avatarUrl} url of the avatar
     * @return {Observable} of json data
     */
    fetchAvatar(avatarUrl: string): Observable<any>;
}
