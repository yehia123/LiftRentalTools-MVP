import { EventEmitter, Renderer2, ElementRef, OnChanges, SimpleChange } from '@angular/core';
import { Source } from "./sources/source";
import { AsyncSource } from "./sources/async-source";
import { SourceFactory } from './sources/source.factory';
import { AvatarService } from './avatar.service';
/**
 * Universal avatar component that
 * generates avatar from different sources
 *
 * @export
 * @class AvatarComponent
 * @implements {OnInit}
 */
export declare class AvatarComponent implements OnChanges {
    renderer: Renderer2;
    elementRef: ElementRef;
    sourceFactory: SourceFactory;
    private avatarService;
    round: boolean;
    size: number;
    textSizeRatio: number;
    bgColor: string;
    fgColor: string;
    borderColor: string;
    style: any;
    cornerRadius: number;
    facebook: string;
    twitter: string;
    google: string;
    vkontakte: string;
    skype: string;
    gravatar: string;
    github: string;
    custom: string;
    initials: string;
    value: string;
    placeholder: string;
    initialsSize: number;
    clickOnAvatar: EventEmitter<any>;
    _currentSource: number;
    _sources: Source[];
    src: string;
    data: string;
    avatarStyle: any;
    hostStyle: any;
    constructor(renderer: Renderer2, elementRef: ElementRef, sourceFactory: SourceFactory, avatarService: AvatarService);
    /**
     * Detect inputs change
     *
     * @param {{ [propKey: string]: SimpleChange }} changes
     *
     * @memberof AvatarComponent
     */
    ngOnChanges(changes: {
        [propKey: string]: SimpleChange;
    }): void;
    /**
     * Initialize the avatar component and its fallback system
     */
    _initializeAvatar(): void;
    /**
     * Fetch avatar source
     *
     * @param {any} event
     *
     * @memberOf AvatarComponent
     */
    fetch(event?: any): void;
    /**
     *
     * @returns initials style
     *
     * @memberOf AvatarComponent
     */
    _initialsStyle(avatarValue: string): any;
    /**
     *
     * @returns image style
     *
     * @memberOf AvatarComponent
     */
    _imageStyle(): any;
    /**
     * Fetch avatar image asynchrounsly.
     *
     * @param {Source} source represents avatar source
     * @memberof AvatarComponent
     */
    _fetchAsyncAvatar(source: AsyncSource): void;
    /**
     * Add avatar source
     *
     * @param sourceType avatar source type e.g facebook,twitter, etc.
     * @param sourceValue  source value e.g facebookId value, etc.
     */
    _addSource(sourceType: string, sourceValue: string): void;
    /**
     * This method check wether an avatar source has been added. If so
     * the source value will be updated with the new value passed as
     * paramater.
     * It returns true if the source exists and update has been performed,
     * returns false if the source was not found
     *
     * @param {string} sourceType the type of the source
     * @param {string} sourceValue the new value of the source
     *
     * @memberof AvatarComponent
     */
    _updateExistingSource(sourceType: string, sourceValue: string): boolean;
}
